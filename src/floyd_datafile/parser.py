# Generated by pyfloyd version 0.19.1.dev0
#    https://github.com/dpranke/pyfloyd
#    `pyfloyd -o src/floyd_datafile/parser.py --memoize -c --python floyd-datafile.g`

import re
from typing import Any, Dict, NamedTuple, Optional


Externs = Optional[Dict[str, Any]]

# pylint: disable=too-many-lines


class _ParsingRuntimeError(Exception):
    pass


class Result(NamedTuple):
    """The result returned from a `parse()` call.

    If the parse is successful, `val` will contain the returned value, if any
    and `pos` will indicate the point in the text where the parser stopped.
    If the parse is unsuccessful, `err` will contain a string describing
    any errors that occurred during the parse and `pos` will indicate
    the location of the farthest error in the text.
    """

    val: Any = None
    err: Optional[str] = None
    pos: Optional[int] = None


def parse(
    text: str, path: str = '<string>', externs: Externs = None
) -> Result:
    """Parse a given text and return the result.

    If the parse was successful, `result.val` will be the returned value
    from the parse, and `result.pos` will indicate where the parser
    stopped when it was done parsing.

    If the parse is unsuccessful, `result.err` will be a string describing
    any errors found in the text, and `result.pos` will indicate the
    furthest point reached during the parse.

    If the optional `path` is provided it will be used in any error
    messages to indicate the path to the filename containing the given
    text.
    """
    return _Parser(text, path).parse(externs)


class _Parser:
    def __init__(self, text, path):
        self._text = text
        self._end = len(self._text)
        self._errpos = 0
        self._expected_externs = {'_consume_trailing'}
        self._externs = {}
        self._failed = False
        self._path = path
        self._pos = 0
        self._val = None
        self._cache = {}
        self._regexps = {}
        self._scopes = []

    def parse(self, externs: Externs = None):
        self._externs = externs or {}
        errors = self._check_externs()
        if errors:
            return Result(None, errors, 0)

        try:
            self._r_grammar()
            if self._failed:
                return Result(None, self._err_str(), self._errpos)
            return Result(self._val, None, self._pos)
        except _ParsingRuntimeError as e:  # pragma: no cover
            lineno, _ = self._err_offsets()
            return Result(
                None,
                self._path + ':' + str(lineno) + ' ' + str(e),
                self._errpos,
            )

    def _r_grammar(self):
        p = self._pos
        self._s_grammar_1()
        if not self._failed:
            return
        self._rewind(p)
        self._s_grammar_3()

    def _s_grammar_1(self):
        self._memoize('r_value', self._r_value)
        if self._failed:
            return
        v__1 = self._val
        self._s_grammar_2()
        if self._failed:
            return
        self._succeed(v__1)

    def _s_grammar_2(self):
        v = self._externs['_consume_trailing']
        if v is True:
            self._succeed(v)
        elif v is False:
            self._fail()
        else:
            raise _ParsingRuntimeError('Bad predicate value')
        if self._failed:
            return
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_end', self._r_end)

    def _s_grammar_3(self):
        self._s_grammar_4()
        if self._failed:
            return
        v__1 = self._val
        self._s_grammar_5()
        if self._failed:
            return
        self._succeed(v__1)

    def _s_grammar_4(self):
        vs = []
        self._memoize('r_member', self._r_member)
        if self._failed:
            return
        vs.append(self._val)
        while True:
            p = self._pos
            self._memoize('r_member', self._r_member)
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_grammar_5(self):
        v = self._externs['_consume_trailing']
        if v is True:
            self._succeed(v)
        elif v is False:
            self._fail()
        else:
            raise _ParsingRuntimeError('Bad predicate value')
        if self._failed:
            return
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_end', self._r_end)

    def _r_ws(self):
        vs = []
        self._s_ws_1()
        if self._failed:
            return
        vs.append(self._val)
        while True:
            p = self._pos
            self._s_ws_1()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_ws_1(self):
        p = '[ \n\r\t]'
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._succeed(m.group(0), m.end())
            return
        self._fail()

    def _r_eol(self):
        p = self._pos
        self._str('\r\n')
        if not self._failed:
            return
        self._rewind(p)
        self._ch('\r')
        if not self._failed:
            return
        self._rewind(p)
        self._ch('\n')

    def _r_value(self):
        p = self._pos
        self._s_value_1()
        if not self._failed:
            return
        self._rewind(p)
        self._s_value_2()
        if not self._failed:
            return
        self._rewind(p)
        self._s_value_3()
        if not self._failed:
            return
        self._rewind(p)
        self._s_value_4()
        if not self._failed:
            return
        self._rewind(p)
        self._s_value_7()
        if not self._failed:
            return
        self._rewind(p)
        self._s_value_9()
        if not self._failed:
            return
        self._rewind(p)
        self._s_value_10()
        if not self._failed:
            return
        self._rewind(p)
        self._s_value_11()
        if not self._failed:
            return
        self._rewind(p)
        self._s_value_12()

    def _s_value_1(self):
        self._memoize('r__filler', self._r__filler)
        self._str('true')
        if self._failed:
            return
        self._succeed(['true', None])

    def _s_value_2(self):
        self._memoize('r__filler', self._r__filler)
        self._str('false')
        if self._failed:
            return
        self._succeed(['false', None])

    def _s_value_3(self):
        self._memoize('r__filler', self._r__filler)
        self._str('null')
        if self._failed:
            return
        self._succeed(['null', None])

    def _s_value_4(self):
        self._s_value_5()
        if self._failed:
            return
        v__1 = self._val
        self._succeed(['number', v__1])

    def _s_value_5(self):
        start = self._pos
        self._s_value_6()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_value_6(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_number', self._r_number)

    def _s_value_7(self):
        self._s_value_8()
        if self._failed:
            return
        v__1 = self._val
        self._succeed(v__1)

    def _s_value_8(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_string', self._r_string)

    def _s_value_9(self):
        self._memoize('r_string_list', self._r_string_list)
        if self._failed:
            return
        v__1 = self._val
        self._succeed(['string_list', v__1])

    def _s_value_10(self):
        self._memoize('r_array', self._r_array)
        if self._failed:
            return
        v__1 = self._val
        self._succeed(['array', v__1])

    def _s_value_11(self):
        self._memoize('r_object', self._r_object)
        if self._failed:
            return
        v__1 = self._val
        self._succeed(['object', v__1])

    def _s_value_12(self):
        self._s_value_13()
        if self._failed:
            return
        v__1 = self._val
        self._succeed(v__1)

    def _s_value_13(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_bare_word', self._r_bare_word)

    def _r_number(self):
        p = self._pos
        self._s_number_1()
        if not self._failed:
            return
        self._rewind(p)
        self._s_number_6()
        if not self._failed:
            return
        self._rewind(p)
        self._s_number_11()
        if not self._failed:
            return
        self._rewind(p)
        self._s_number_16()
        if not self._failed:
            return
        self._rewind(p)
        self._s_number_21()

    def _s_number_1(self):
        self._s_number_2()
        self._memoize('r_int', self._r_int)
        if self._failed:
            return
        self._s_number_4()
        self._s_number_5()

    def _s_number_2(self):
        p = self._pos
        self._s_number_3()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_number_3(self):
        p = self._pos
        self._ch('-')
        if not self._failed:
            return
        self._rewind(p)
        self._ch('+')

    def _s_number_4(self):
        p = self._pos
        self._memoize('r_frac', self._r_frac)
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_number_5(self):
        p = self._pos
        self._memoize('r_exp', self._r_exp)
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_number_6(self):
        self._str('0b')
        if self._failed:
            return
        self._memoize('r_bin', self._r_bin)
        if self._failed:
            return
        self._s_number_7()

    def _s_number_7(self):
        p = self._pos
        self._s_number_8()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_number_8(self):
        self._s_number_9()
        self._memoize('r_bin', self._r_bin)

    def _s_number_9(self):
        vs = []
        while True:
            p = self._pos
            self._s_number_10()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_number_10(self):
        p = self._pos
        self._memoize('r_bin', self._r_bin)
        if not self._failed:
            return
        self._rewind(p)
        self._ch('_')

    def _s_number_11(self):
        self._str('0o')
        if self._failed:
            return
        self._memoize('r_oct', self._r_oct)
        if self._failed:
            return
        self._s_number_12()

    def _s_number_12(self):
        p = self._pos
        self._s_number_13()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_number_13(self):
        self._s_number_14()
        self._memoize('r_oct', self._r_oct)

    def _s_number_14(self):
        vs = []
        while True:
            p = self._pos
            self._s_number_15()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_number_15(self):
        p = self._pos
        self._memoize('r_oct', self._r_oct)
        if not self._failed:
            return
        self._rewind(p)
        self._ch('_')

    def _s_number_16(self):
        self._str('0x')
        if self._failed:
            return
        self._memoize('r_hex', self._r_hex)
        if self._failed:
            return
        self._s_number_17()

    def _s_number_17(self):
        p = self._pos
        self._s_number_18()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_number_18(self):
        self._s_number_19()
        self._memoize('r_hex', self._r_hex)

    def _s_number_19(self):
        vs = []
        while True:
            p = self._pos
            self._s_number_20()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_number_20(self):
        p = self._pos
        self._memoize('r_hex', self._r_hex)
        if not self._failed:
            return
        self._rewind(p)
        self._ch('_')

    def _s_number_21(self):
        self._str('0X')
        if self._failed:
            return
        self._memoize('r_hex', self._r_hex)
        if self._failed:
            return
        self._s_number_22()

    def _s_number_22(self):
        p = self._pos
        self._s_number_23()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_number_23(self):
        self._s_number_24()
        self._memoize('r_hex', self._r_hex)

    def _s_number_24(self):
        vs = []
        while True:
            p = self._pos
            self._s_number_25()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_number_25(self):
        p = self._pos
        self._memoize('r_hex', self._r_hex)
        if not self._failed:
            return
        self._rewind(p)
        self._ch('_')

    def _r_int(self):
        p = self._pos
        self._ch('0')
        if not self._failed:
            return
        self._rewind(p)
        self._s_int_1()

    def _s_int_1(self):
        self._memoize('r_nonzerodigit', self._r_nonzerodigit)
        if self._failed:
            return
        self._memoize('r_digit_sep', self._r_digit_sep)

    def _r_digit_sep(self):
        p = self._pos
        self._s_digit_sep_1()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_digit_sep_1(self):
        self._s_digit_sep_2()
        self._memoize('r_digit', self._r_digit)

    def _s_digit_sep_2(self):
        vs = []
        while True:
            p = self._pos
            self._s_digit_sep_3()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_digit_sep_3(self):
        p = self._pos
        self._memoize('r_digit', self._r_digit)
        if not self._failed:
            return
        self._rewind(p)
        self._ch('_')

    def _r_digit(self):
        self._range('0', '9')

    def _r_nonzerodigit(self):
        self._range('1', '9')

    def _r_frac(self):
        self._ch('.')
        if self._failed:
            return
        self._memoize('r_digit_sep', self._r_digit_sep)

    def _r_exp(self):
        self._s_exp_1()
        if self._failed:
            return
        self._s_exp_2()
        self._memoize('r_digit_sep', self._r_digit_sep)

    def _s_exp_1(self):
        p = self._pos
        self._ch('e')
        if not self._failed:
            return
        self._rewind(p)
        self._ch('E')

    def _s_exp_2(self):
        p = self._pos
        self._s_exp_3()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_exp_3(self):
        p = self._pos
        self._ch('+')
        if not self._failed:
            return
        self._rewind(p)
        self._ch('-')

    def _r_bin(self):
        p = self._pos
        self._ch('0')
        if not self._failed:
            return
        self._rewind(p)
        self._ch('1')

    def _r_oct(self):
        self._range('0', '7')

    def _r_hex(self):
        p = self._pos
        self._range('0', '9')
        if not self._failed:
            return
        self._rewind(p)
        self._range('a', 'f')
        if not self._failed:
            return
        self._rewind(p)
        self._range('A', 'F')

    def _r_string_list(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('(')
        if self._failed:
            return
        self._s_string_list_1()
        if self._failed:
            return
        v__2 = self._val
        self._s_string_list_2()
        v__3 = self._val
        self._memoize('r__filler', self._r__filler)
        self._ch(')')
        if self._failed:
            return
        self._succeed(self._fn_cons(v__2, v__3))

    def _s_string_list_1(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_string', self._r_string)

    def _s_string_list_2(self):
        vs = []
        while True:
            p = self._pos
            self._s_string_list_3()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_string_list_3(self):
        self._s_string_list_4()
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_string', self._r_string)

    def _s_string_list_4(self):
        p = self._pos
        self._s_string_list_5()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_string_list_5(self):
        self._memoize('r__filler', self._r__filler)
        self._ch(',')

    def _r_string(self):
        p = self._pos
        self._s_string_1()
        if not self._failed:
            return
        self._rewind(p)
        self._s_string_2()
        if not self._failed:
            return
        self._rewind(p)
        self._s_string_3()

    def _s_string_1(self):
        self._memoize('r_string_tag', self._r_string_tag)
        v__1 = self._val
        self._memoize('r_str', self._r_str)
        if self._failed:
            return
        v__2 = self._val
        self._succeed(['string', [v__1, v__2]])

    def _s_string_2(self):
        self._memoize('r_raw_tag', self._r_raw_tag)
        if self._failed:
            return
        v__1 = self._val
        self._memoize('r_raw_str', self._r_raw_str)
        if self._failed:
            return
        v__2 = self._val
        self._succeed(['string', [v__1, v__2]])

    def _s_string_3(self):
        self._memoize('r_bare_word', self._r_bare_word)
        if self._failed:
            return
        v__1 = self._val
        self._succeed(['string', ['', v__1]])

    def _r_bare_word(self):
        start = self._pos
        self._s_bare_word_1()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_bare_word_1(self):
        p = "[^\\s\\[\\]\\(\\)\\{\\}:'\"`]+"
        if p not in self._regexps:
            self._regexps[p] = re.compile(p)
        m = self._regexps[p].match(self._text, self._pos)
        if m:
            self._succeed(m.group(0), m.end())
            return
        self._fail()

    def _r_string_tag(self):
        p = self._pos
        self._ch('d')
        if not self._failed:
            return
        self._rewind(p)
        self._succeed('')

    def _r_str(self):
        p = self._pos
        self._scopes.append({})
        self._s_str_1()
        self._scopes.pop()
        if not self._failed:
            return
        self._rewind(p)
        self._scopes.append({})
        self._s_str_3()
        self._scopes.pop()
        if not self._failed:
            return
        self._rewind(p)
        self._scopes.append({})
        self._s_str_5()
        self._scopes.pop()
        if not self._failed:
            return
        self._rewind(p)
        self._scopes.append({})
        self._s_str_7()
        self._scopes.pop()
        if not self._failed:
            return
        self._rewind(p)
        self._scopes.append({})
        self._s_str_9()
        self._scopes.pop()
        if not self._failed:
            return
        self._rewind(p)
        self._scopes.append({})
        self._s_str_11()
        self._scopes.pop()
        if not self._failed:
            return
        self._rewind(p)
        self._scopes.append({})
        self._s_str_13()
        self._scopes.pop()

    def _s_str_1(self):
        self._memoize('r_tsquote', self._r_tsquote)
        if self._failed:
            return
        self._s_str_2()
        self._scopes[-1]['$2'] = self._val
        self._memoize('r_tsquote', self._r_tsquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(self._lookup('$2')))

    def _s_str_2(self):
        vs = []
        while True:
            p = self._pos
            self._memoize('r_tsqchar', self._r_tsqchar)
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_str_3(self):
        self._memoize('r_tdquote', self._r_tdquote)
        if self._failed:
            return
        self._s_str_4()
        self._scopes[-1]['$2'] = self._val
        self._memoize('r_tdquote', self._r_tdquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(self._lookup('$2')))

    def _s_str_4(self):
        vs = []
        while True:
            p = self._pos
            self._memoize('r_tdqchar', self._r_tdqchar)
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_str_5(self):
        self._memoize('r_tbquote', self._r_tbquote)
        if self._failed:
            return
        self._s_str_6()
        self._scopes[-1]['$2'] = self._val
        self._memoize('r_tbquote', self._r_tbquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(self._lookup('$2')))

    def _s_str_6(self):
        vs = []
        while True:
            p = self._pos
            self._memoize('r_tbqchar', self._r_tbqchar)
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_str_7(self):
        self._memoize('r_squote', self._r_squote)
        if self._failed:
            return
        self._s_str_8()
        self._scopes[-1]['$2'] = self._val
        self._memoize('r_squote', self._r_squote)
        if self._failed:
            return
        self._succeed(self._fn_cat(self._lookup('$2')))

    def _s_str_8(self):
        vs = []
        while True:
            p = self._pos
            self._memoize('r_sqchar', self._r_sqchar)
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_str_9(self):
        self._memoize('r_dquote', self._r_dquote)
        if self._failed:
            return
        self._s_str_10()
        self._scopes[-1]['$2'] = self._val
        self._memoize('r_dquote', self._r_dquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(self._lookup('$2')))

    def _s_str_10(self):
        vs = []
        while True:
            p = self._pos
            self._memoize('r_dqchar', self._r_dqchar)
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_str_11(self):
        self._memoize('r_bquote', self._r_bquote)
        if self._failed:
            return
        self._s_str_12()
        self._scopes[-1]['$2'] = self._val
        self._memoize('r_bquote', self._r_bquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(self._lookup('$2')))

    def _s_str_12(self):
        vs = []
        while True:
            p = self._pos
            self._memoize('r_bqchar', self._r_bqchar)
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_str_13(self):
        self._str("L'")
        if self._failed:
            return
        self._s_str_14()
        self._scopes[-1]['l'] = self._val
        self._ch("'")
        if self._failed:
            return
        self._s_str_15()
        self._scopes[-1]['cs'] = self._val
        self._ch("'")
        if self._failed:
            return
        self._str(self._lookup('l'))
        if self._failed:
            return
        self._ch("'")
        if self._failed:
            return
        self._succeed(self._fn_cat(self._lookup('cs')))

    def _s_str_14(self):
        vs = []
        while True:
            p = self._pos
            self._ch('-')
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_str_15(self):
        vs = []
        while True:
            p = self._pos
            self._s_str_16()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_str_16(self):
        p = self._pos
        self._s_str_17()
        if not self._failed:
            return
        self._rewind(p)
        self._s_str_19()

    def _s_str_17(self):
        start = self._pos
        self._s_str_18()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_str_18(self):
        self._memoize('r_bslash', self._r_bslash)
        if self._failed:
            return
        self._memoize('r_squote', self._r_squote)

    def _s_str_19(self):
        p = self._pos
        errpos = self._errpos
        self._s_str_20()
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()

    def _s_str_20(self):
        self._ch("'")
        if self._failed:
            return
        self._str(self._lookup('l'))
        if self._failed:
            return
        self._ch("'")

    def _r_tsquote(self):
        self._str("'''")

    def _r_tsqchar(self):
        p = self._pos
        self._s_tsqchar_1()
        if not self._failed:
            return
        self._rewind(p)
        p = self._pos
        errpos = self._errpos
        self._memoize('r_tsquote', self._r_tsquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()

    def _s_tsqchar_1(self):
        start = self._pos
        self._s_tsqchar_2()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_tsqchar_2(self):
        self._memoize('r_bslash', self._r_bslash)
        if self._failed:
            return
        self._memoize('r_squote', self._r_squote)

    def _r_tbquote(self):
        self._str('```')

    def _r_tdquote(self):
        self._str('"""')

    def _r_tdqchar(self):
        p = self._pos
        self._s_tdqchar_1()
        if not self._failed:
            return
        self._rewind(p)
        p = self._pos
        errpos = self._errpos
        self._memoize('r_tdquote', self._r_tdquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()

    def _s_tdqchar_1(self):
        start = self._pos
        self._s_tdqchar_2()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_tdqchar_2(self):
        self._memoize('r_bslash', self._r_bslash)
        if self._failed:
            return
        self._memoize('r_dquote', self._r_dquote)

    def _r_tbqchar(self):
        p = self._pos
        self._s_tbqchar_1()
        if not self._failed:
            return
        self._rewind(p)
        p = self._pos
        errpos = self._errpos
        self._memoize('r_tsquote', self._r_tsquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()

    def _s_tbqchar_1(self):
        start = self._pos
        self._s_tbqchar_2()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_tbqchar_2(self):
        self._memoize('r_bslash', self._r_bslash)
        if self._failed:
            return
        self._memoize('r_bquote', self._r_bquote)

    def _r_squote(self):
        self._ch("'")

    def _r_dquote(self):
        self._ch('"')

    def _r_bquote(self):
        self._ch('`')

    def _r_sqchar(self):
        p = self._pos
        self._s_sqchar_1()
        if not self._failed:
            return
        self._rewind(p)
        p = self._pos
        errpos = self._errpos
        self._memoize('r_squote', self._r_squote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()

    def _s_sqchar_1(self):
        start = self._pos
        self._s_sqchar_2()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_sqchar_2(self):
        self._memoize('r_bslash', self._r_bslash)
        if self._failed:
            return
        self._memoize('r_squote', self._r_squote)

    def _r_dqchar(self):
        p = self._pos
        self._s_dqchar_1()
        if not self._failed:
            return
        self._rewind(p)
        p = self._pos
        errpos = self._errpos
        self._memoize('r_dquote', self._r_dquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()

    def _s_dqchar_1(self):
        start = self._pos
        self._s_dqchar_2()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_dqchar_2(self):
        self._memoize('r_bslash', self._r_bslash)
        if self._failed:
            return
        self._memoize('r_dquote', self._r_dquote)

    def _r_bqchar(self):
        p = self._pos
        self._s_bqchar_1()
        if not self._failed:
            return
        self._rewind(p)
        p = self._pos
        errpos = self._errpos
        self._memoize('r_bquote', self._r_bquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()

    def _s_bqchar_1(self):
        start = self._pos
        self._s_bqchar_2()
        if self._failed:
            return
        end = self._pos
        self._val = self._text[start:end]

    def _s_bqchar_2(self):
        self._memoize('r_bslash', self._r_bslash)
        if self._failed:
            return
        self._memoize('r_bquote', self._r_bquote)

    def _r_raw_tag(self):
        p = self._pos
        self._s_raw_tag_1()
        if not self._failed:
            return
        self._rewind(p)
        self._s_raw_tag_2()

    def _s_raw_tag_1(self):
        self._ch('r')
        if self._failed:
            return
        v__1 = self._val
        self._memoize('r_string_tag', self._r_string_tag)
        v__2 = self._val
        self._succeed(self._fn_cat(v__1, v__2))

    def _s_raw_tag_2(self):
        self._memoize('r_string_tag', self._r_string_tag)
        v__1 = self._val
        self._ch('r')
        if self._failed:
            return
        v__2 = self._val
        self._succeed(self._fn_cat(v__2, v__1))

    def _r_raw_str(self):
        p = self._pos
        self._s_raw_str_1()
        if not self._failed:
            return
        self._rewind(p)
        self._s_raw_str_2()
        if not self._failed:
            return
        self._rewind(p)
        self._s_raw_str_3()
        if not self._failed:
            return
        self._rewind(p)
        self._s_raw_str_4()
        if not self._failed:
            return
        self._rewind(p)
        self._s_raw_str_5()
        if not self._failed:
            return
        self._rewind(p)
        self._s_raw_str_6()

    def _s_raw_str_1(self):
        self._memoize('r_tsquote', self._r_tsquote)
        if self._failed:
            return
        p = self._pos
        errpos = self._errpos
        self._memoize('r_tsquote', self._r_tsquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()
        if self._failed:
            return
        v__2 = self._val
        self._memoize('r_tsquote', self._r_tsquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(v__2))

    def _s_raw_str_2(self):
        self._memoize('r_tdquote', self._r_tdquote)
        if self._failed:
            return
        p = self._pos
        errpos = self._errpos
        self._memoize('r_tdquote', self._r_tdquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()
        if self._failed:
            return
        v__2 = self._val
        self._memoize('r_tdquote', self._r_tdquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(v__2))

    def _s_raw_str_3(self):
        self._memoize('r_tbquote', self._r_tbquote)
        if self._failed:
            return
        p = self._pos
        errpos = self._errpos
        self._memoize('r_tbquote', self._r_tbquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()
        if self._failed:
            return
        v__2 = self._val
        self._memoize('r_tbquote', self._r_tbquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(v__2))

    def _s_raw_str_4(self):
        self._memoize('r_squote', self._r_squote)
        if self._failed:
            return
        p = self._pos
        errpos = self._errpos
        self._memoize('r_squote', self._r_squote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()
        if self._failed:
            return
        v__2 = self._val
        self._memoize('r_squote', self._r_squote)
        if self._failed:
            return
        self._succeed(self._fn_cat(v__2))

    def _s_raw_str_5(self):
        self._memoize('r_dquote', self._r_dquote)
        if self._failed:
            return
        p = self._pos
        errpos = self._errpos
        self._memoize('r_dquote', self._r_dquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()
        if self._failed:
            return
        v__2 = self._val
        self._memoize('r_dquote', self._r_dquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(v__2))

    def _s_raw_str_6(self):
        self._memoize('r_bquote', self._r_bquote)
        if self._failed:
            return
        p = self._pos
        errpos = self._errpos
        self._memoize('r_bquote', self._r_bquote)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()
        if self._failed:
            return
        v__2 = self._val
        self._memoize('r_bquote', self._r_bquote)
        if self._failed:
            return
        self._succeed(self._fn_cat(v__2))

    def _r_bslash(self):
        self._ch('\\')

    def _r_escape(self):
        p = self._pos
        self._s_escape_1()
        if not self._failed:
            return
        self._rewind(p)
        self._s_escape_2()
        if not self._failed:
            return
        self._rewind(p)
        self._s_escape_3()
        if not self._failed:
            return
        self._rewind(p)
        self._s_escape_4()
        if not self._failed:
            return
        self._rewind(p)
        self._s_escape_5()
        if not self._failed:
            return
        self._rewind(p)
        self._s_escape_6()
        if not self._failed:
            return
        self._rewind(p)
        self._s_escape_7()
        if not self._failed:
            return
        self._rewind(p)
        self._s_escape_8()
        if not self._failed:
            return
        self._rewind(p)
        self._s_escape_9()
        if not self._failed:
            return
        self._rewind(p)
        self._s_escape_10()
        if not self._failed:
            return
        self._rewind(p)
        self._memoize('r_oct_escape', self._r_oct_escape)
        if not self._failed:
            return
        self._rewind(p)
        self._memoize('r_hex_escape', self._r_hex_escape)
        if not self._failed:
            return
        self._rewind(p)
        self._memoize('r_uni_escape', self._r_uni_escape)

    def _s_escape_1(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('b')
        if self._failed:
            return
        self._succeed('\b')

    def _s_escape_2(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('f')
        if self._failed:
            return
        self._succeed('\f')

    def _s_escape_3(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('n')
        if self._failed:
            return
        self._succeed('\n')

    def _s_escape_4(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('r')
        if self._failed:
            return
        self._succeed('\r')

    def _s_escape_5(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('t')
        if self._failed:
            return
        self._succeed('\t')

    def _s_escape_6(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('v')
        if self._failed:
            return
        self._succeed('\v')

    def _s_escape_7(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_squote', self._r_squote)

    def _s_escape_8(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_dquote', self._r_dquote)

    def _s_escape_9(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_bquote', self._r_bquote)

    def _s_escape_10(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_bslash', self._r_bslash)

    def _r_oct_escape(self):
        self._s_oct_escape_1()
        if self._failed:
            return
        v__1 = self._val
        self._succeed(self._fn_otou(self._fn_cat(v__1)))

    def _s_oct_escape_1(self):
        vs = []
        i = 0
        cmin, cmax = [1, 3]
        while i < cmax:
            self._s_oct_escape_2()
            if self._failed:
                if i >= cmin:
                    self._succeed(vs)
                    return
                return
            vs.append(self._val)
            i += 1
        self._succeed(vs)

    def _s_oct_escape_2(self):
        self._memoize('r__filler', self._r__filler)
        self._range('0', '7')

    def _r_hex_escape(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('x')
        if self._failed:
            return
        self._s_hex_escape_1()
        if self._failed:
            return
        v__2 = self._val
        self._succeed(self._fn_xtou(self._fn_cat(v__2)))

    def _s_hex_escape_1(self):
        vs = []
        i = 0
        cmin, cmax = [2, 2]
        while i < cmax:
            self._s_hex_escape_2()
            if self._failed:
                if i >= cmin:
                    self._succeed(vs)
                    return
                return
            vs.append(self._val)
            i += 1
        self._succeed(vs)

    def _s_hex_escape_2(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_hex', self._r_hex)

    def _r_uni_escape(self):
        p = self._pos
        self._s_uni_escape_1()
        if not self._failed:
            return
        self._rewind(p)
        self._s_uni_escape_4()

    def _s_uni_escape_1(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('u')
        if self._failed:
            return
        self._s_uni_escape_2()
        if self._failed:
            return
        v__2 = self._val
        self._succeed(self._fn_xtou(self._fn_cat(v__2)))

    def _s_uni_escape_2(self):
        vs = []
        i = 0
        cmin, cmax = [4, 4]
        while i < cmax:
            self._s_uni_escape_3()
            if self._failed:
                if i >= cmin:
                    self._succeed(vs)
                    return
                return
            vs.append(self._val)
            i += 1
        self._succeed(vs)

    def _s_uni_escape_3(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_hex', self._r_hex)

    def _s_uni_escape_4(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('U')
        if self._failed:
            return
        self._s_uni_escape_5()
        if self._failed:
            return
        v__2 = self._val
        self._succeed(self._fn_xtou(self._fn_cat(v__2)))

    def _s_uni_escape_5(self):
        vs = []
        i = 0
        cmin, cmax = [8, 8]
        while i < cmax:
            self._s_uni_escape_6()
            if self._failed:
                if i >= cmin:
                    self._succeed(vs)
                    return
                return
            vs.append(self._val)
            i += 1
        self._succeed(vs)

    def _s_uni_escape_6(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_hex', self._r_hex)

    def _r_array(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('[')
        if self._failed:
            return
        self._s_array_1()
        v__2 = self._val
        self._s_array_2()
        v__3 = self._val
        self._memoize('r__filler', self._r__filler)
        self._ch(']')
        if self._failed:
            return
        self._succeed(self._fn_concat(v__2, v__3))

    def _s_array_1(self):
        p = self._pos
        self._memoize('r_value', self._r_value)
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_array_2(self):
        vs = []
        while True:
            p = self._pos
            self._s_array_3()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_array_3(self):
        self._s_array_4()
        self._memoize('r_value', self._r_value)

    def _s_array_4(self):
        p = self._pos
        self._s_array_5()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_array_5(self):
        self._memoize('r__filler', self._r__filler)
        self._ch(',')

    def _r_object(self):
        self._memoize('r__filler', self._r__filler)
        self._ch('{')
        if self._failed:
            return
        self._s_object_1()
        v__2 = self._val
        self._s_object_2()
        v__3 = self._val
        self._memoize('r__filler', self._r__filler)
        self._ch('}')
        if self._failed:
            return
        self._succeed(self._fn_concat(v__2, v__3))

    def _s_object_1(self):
        p = self._pos
        self._memoize('r_member', self._r_member)
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_object_2(self):
        vs = []
        while True:
            p = self._pos
            self._s_object_3()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s_object_3(self):
        self._s_object_4()
        self._memoize('r_member', self._r_member)

    def _s_object_4(self):
        p = self._pos
        self._s_object_5()
        if self._failed:
            self._succeed([], p)
        else:
            self._succeed([self._val])

    def _s_object_5(self):
        self._memoize('r__filler', self._r__filler)
        self._ch(',')

    def _r_member(self):
        self._memoize('r_key', self._r_key)
        if self._failed:
            return
        v__1 = self._val
        self._memoize('r__filler', self._r__filler)
        self._ch(':')
        if self._failed:
            return
        self._memoize('r_value', self._r_value)
        if self._failed:
            return
        v__3 = self._val
        self._succeed([v__1, v__3])

    def _r_key(self):
        p = self._pos
        self._s_key_1()
        if not self._failed:
            return
        self._rewind(p)
        self._memoize('r_string_list', self._r_string_list)
        if not self._failed:
            return
        self._rewind(p)
        self._s_key_2()

    def _s_key_1(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_string', self._r_string)

    def _s_key_2(self):
        self._s_key_3()
        if self._failed:
            return
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_bare_word', self._r_bare_word)

    def _s_key_3(self):
        p = self._pos
        errpos = self._errpos
        self._s_key_4()
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()

    def _s_key_4(self):
        p = self._pos
        self._s_key_5()
        if not self._failed:
            return
        self._rewind(p)
        self._s_key_6()
        if not self._failed:
            return
        self._rewind(p)
        self._s_key_7()
        if not self._failed:
            return
        self._rewind(p)
        self._s_key_8()

    def _s_key_5(self):
        self._memoize('r__filler', self._r__filler)
        self._str('true')

    def _s_key_6(self):
        self._memoize('r__filler', self._r__filler)
        self._str('false')

    def _s_key_7(self):
        self._memoize('r__filler', self._r__filler)
        self._str('null')

    def _s_key_8(self):
        self._memoize('r__filler', self._r__filler)
        self._memoize('r_number', self._r_number)

    def _r__whitespace(self):
        self._memoize('r_ws', self._r_ws)

    def _r__comment(self):
        p = self._pos
        self._s__comment_1()
        if not self._failed:
            return
        self._rewind(p)
        self._s__comment_3()

    def _s__comment_1(self):
        self._s__comment_2()
        if self._failed:
            return
        p = self._pos
        errpos = self._errpos
        self._memoize('r_eol', self._r_eol)
        if self._failed:
            self._succeed(None, p)
        else:
            self._rewind(p)
            self._errpos = errpos
            self._fail()
        if not self._failed:
            self._r_any()

    def _s__comment_2(self):
        p = self._pos
        self._ch('#')
        if not self._failed:
            return
        self._rewind(p)
        self._str('//')

    def _s__comment_3(self):
        self._str('/*')
        if self._failed:
            return
        while True:
            self._str('*/')
            if not self._failed:
                break
            self._r_any()
            if self._failed:
                break

    def _r__filler(self):
        vs = []
        while True:
            p = self._pos
            self._s__filler_1()
            if self._failed or self._pos == p:
                self._rewind(p)
                break
            vs.append(self._val)
        self._succeed(vs)

    def _s__filler_1(self):
        p = self._pos
        self._memoize('r__whitespace', self._r__whitespace)
        if not self._failed:
            return
        self._rewind(p)
        self._memoize('r__comment', self._r__comment)

    def _r_any(self):
        if self._pos < self._end:
            self._succeed(self._text[self._pos], self._pos + 1)
        else:
            self._fail()

    def _r_end(self):
        if self._pos == self._end:
            self._succeed(None)
        else:
            self._fail()

    def _ch(self, ch):
        p = self._pos
        if p < self._end and self._text[p] == ch:
            self._succeed(ch, self._pos + 1)
        else:
            self._fail()

    def _check_externs(self):
        errors = ''
        for ext in self._expected_externs:
            if ext not in self._externs:
                errors += f'Missing extern "{ext}"\n'
        for ext in self._externs:
            if ext not in self._expected_externs:
                errors += f'Unexpected extern "{ext}"\n'
        return errors.strip()

    def _err_offsets(self):
        lineno = 1
        colno = 1
        for i in range(self._errpos):
            if self._text[i] == '\n':
                lineno += 1
                colno = 1
            else:
                colno += 1
        return lineno, colno

    def _err_str(self):
        lineno, colno = self._err_offsets()
        if self._errpos == len(self._text):
            thing = 'end of input'
        else:
            thing = repr(self._text[self._errpos]).replace("'", '"')
        return '%s:%d Unexpected %s at column %d' % (
            self._path,
            lineno,
            thing,
            colno,
        )

    def _fail(self):
        self._val = None
        self._failed = True
        self._errpos = max(self._errpos, self._pos)

    def _lookup(self, var):
        l = len(self._scopes) - 1
        while l >= 0:
            if var in self._scopes[l]:
                return self._scopes[l][var]
            l -= 1
        if var in self._externs:
            return self._externs[var]
        assert False, f'unknown var {var}'

    def _memoize(self, rule_name, fn):
        p = self._pos
        r = self._cache.setdefault(p, {}).get(rule_name)
        if r:
            self._val, self._failed, self._pos = r
            return
        fn()
        self._cache[p][rule_name] = (self._val, self._failed, self._pos)

    def _range(self, i, j):
        p = self._pos
        if p != self._end and ord(i) <= ord(self._text[p]) <= ord(j):
            self._succeed(self._text[p], self._pos + 1)
        else:
            self._fail()

    def _rewind(self, newpos):
        self._succeed(None, newpos)

    def _str(self, s):
        for ch in s:
            self._ch(ch)
            if self._failed:
                return
        self._val = s

    def _succeed(self, v, newpos=None):
        self._val = v
        self._failed = False
        if newpos is not None:
            self._pos = newpos

    def _fn_cat(self, strs):
        return ''.join(strs)

    def _fn_concat(self, xs, ys):
        return xs + ys

    def _fn_cons(self, hd, tl):
        return [hd] + tl

    def _fn_otou(self, s):
        return chr(int(s, base=8))

    def _fn_xtou(self, s):
        return chr(int(s, base=16))
